syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package motor.v1;
import "registry/info.proto";

option go_package = "github.com/sonr-io/sonr/node/motor/v1";

// MotorService is a RPC service for interfacing over the Motor node.
service MotorService {
  // Node Methods
  // Respond Method to an Invite with Decision
  rpc Share(motor.v1.ShareRequest) returns (motor.v1.ShareResponse) {}

  // Respond Method to an Invite with Decision
  rpc Decide(motor.v1.DecideRequest) returns (motor.v1.DecideResponse) {}

  // Search Method to find a Peer by SName or PeerID
  rpc Search(motor.v1.SearchRequest) returns (motor.v1.SearchResponse) {}

  // Events Streams
  // Returns a stream of Lobby Refresh Events
  rpc OnLobbyRefresh(motor.v1.OnLobbyRefreshRequest) returns (stream motor.v1.OnLobbyRefreshResponse) {}

  // Returns a stream of Mailbox Message Events
  rpc OnMailboxMessage(motor.v1.OnMailboxMessageRequest) returns (stream motor.v1.OnMailboxMessageResponse) {}

  // Returns a stream of DecisionEvent's for Accepted Invites
  rpc OnTransmitDecision(motor.v1.OnTransmitDecisionRequest) returns (stream motor.v1.OnTransmitDecisionResponse) {}

  // Returns a stream of DecisionEvent's for Invites
  rpc OnTransmitInvite(motor.v1.OnTransmitInviteRequest) returns (stream motor.v1.OnTransmitInviteResponse) {}

  // Returns a stream of ProgressEvent's for Sessions
  rpc OnTransmitProgress(motor.v1.OnTransmitProgressRequest) returns (stream motor.v1.OnTransmitProgressResponse) {}

  // Returns a stream of Completed Transfers
  rpc OnTransmitComplete(motor.v1.OnTransmitCompleteRequest) returns (stream motor.v1.OnTransmitCompleteResponse) {}
}


// -----------------------------------------------------------------------------
// Motor Node API
// -----------------------------------------------------------------------------
// (Client) InitializeRequest Message to Establish Sonr Host/API/Room
message InitializeRequest {
  common.v1.Location location = 1;     // Current Runtime Location
  common.v1.Profile profile = 2;       // Users Contact Card
  common.v1.Connection connection = 3; // Internet Connection Type
  DeviceOptions device_options = 6;     // File System Config
  map<string,string> variables = 7;     // Domain TXT Records
  string wallet_passphrase = 8;          // Wallet Passphrase

  // Optional Message to Initialize FileSystem
  message DeviceOptions {
    string id = 1;           // Device ID
    string home_dir = 2;
    string support_dir = 3;
    string temp_dir = 4;
  }
  // IP Address Interface
  message IPAddress {
    string name = 1;   // Name of Interface
    string address = 2;  // IP Address of Interface
    bool internal = 3; // Wether it is a Loopback Interface
    Family family = 4; // Address Family

    enum Family {
      FAMILY_UNSPECIFIED = 0;
      FAMILY_IPV4 = 1; // IPv4 Address
      FAMILY_IPV6 = 2; // IPv6 Address
    }
  }
}

// (Client) ShareRequest is request to share supplied files/urls with a peer
message ShareRequest {
  common.v1.Peer peer = 1; // Peer to Share with
  repeated common.v1.SupplyItem items = 2; // Supply Items to share
}

// (Client) DecideRequest is request to respond to a share request
message DecideRequest {
  bool decision = 1;       // True if Supply is Active
  common.v1.Peer peer = 2; // Peer to Share with
}

// (Client) SearchRequest is Message for Searching for Peer
message SearchRequest {
  oneof query {
    string s_name = 1;  // SName combined with Device ID and Hashed
    string peer_id = 2; // Peer ID
  }
}

message OnLobbyRefreshRequest {}

message OnMailboxMessageRequest {}

message OnTransmitDecisionRequest {}

message OnTransmitInviteRequest {}

message OnTransmitProgressRequest {}

message OnTransmitCompleteRequest {}

// (Client) ShareResponse is response to ShareRequest
message ShareResponse {
  bool success = 1; // True if Supply is Active
  string error = 2; // Error Message if Supply is not Active
}

// (Client) RespondResponse is response to RespondRequest
message DecideResponse {
  bool success = 1; // True if Supply is Active
  string error = 2; // Error Message if Supply is not Active
}

// (Client) SearchResponse is Message for Searching for Peer
message SearchResponse {
  bool success = 1;        // Success
  string error = 2;        // Error Message
  common.v1.Peer peer = 3; // Peer Data
  string peer_id = 4;       // Peer ID
  string s_name = 5;        // SName
}


// DecisionEvent is emitted when a decision is made by Peer.
message OnTransmitDecisionResponse {
  bool decision = 1;       // true = accept, false = reject
  common.v1.Peer from = 2; // Peer that made decision
  int64 received = 3;      // Timestamp
}

// Message Sent when peer messages Lobby
message OnLobbyRefreshResponse {
  string olc = 1;                    // OLC Code of Topic
  repeated common.v1.Peer peers = 2; // User Information
  int64 received = 3;                // Invite received Timestamp
}

// InviteEvent notifies Peer that an Invite has been received
message OnTransmitInviteResponse {
  int64 received = 1;            // Invite received Timestamp
  common.v1.Peer from = 2;       // Peer that sent the Invite
  common.v1.Payload payload = 3; // Attached Data
}

// Received Mail Event
message OnMailboxMessageResponse {
  string id = 1;                    // ID is the Message ID
  bytes buffer = 2;                 // Buffer is the message data
  common.v1.Profile from = 3;       // Users Peer Data
  common.v1.Profile to = 4;         // Receivers Peer Data
  common.v1.Metadata metadata = 5;  // Metadata
}

// Transfer Progress Event
message OnTransmitProgressResponse {
  double progress = 1; // Current Transfer Progress
  int64 received = 2;  // Timestamp
  int32 current = 3; // Current position of item in list
  int32 total = 4; // Total number of items in list
  common.v1.Direction direction = 5; // Direction of Transfer
}

// Message Sent after Completed Transfer
message OnTransmitCompleteResponse {
  common.v1.Direction direction = 1; // Direction of Transfer
  common.v1.Payload payload = 2;     // Transfer Data
  common.v1.Peer from = 3; // Peer that sent the Complete Event
  common.v1.Peer to = 4;   // Peer that received the Complete Event
  int64 created_at = 5;     // Transfer Created Timestamp
  int64 received_at = 6;    // Transfer Received Timestamp
  map<int32, bool> results = 7; // Transfer Success
}
