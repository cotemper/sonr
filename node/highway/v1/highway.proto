syntax = "proto3";

// Package Highway is used for defining a Highway node and its properties.
package highway.v1;
import "channel/channel.proto";
import "channel/tx.proto";
import "bucket/tx.proto";
import "object/tx.proto";
import "registry/tx.proto";
import "v1/request.proto";
import "v1/response.proto";
import "google/api/annotations.proto";

option go_package = "github.com/sonr-io/sonr/node/highway/v1";

// HighwayService is a RPC service for interfacing over the Highway node.
service HighwayService {
  // AccessName returns details and publicly available information about the Peer given calling node
  // has permission to access. i.e "prad.snr" -> "firstname online profilePic city"
  rpc AccessName(highway.v1.MsgAccessName) returns (highway.v1.MsgAccessNameResponse) {
    option (google.api.http) = {
      post: "/access/name"
    };
  }

  // RegisterName registers a new ".snr" name for the calling node. It is only allowed to be called
  // once per node.
  rpc RegisterName(sonrio.sonr.registry.MsgRegisterName) returns (sonrio.sonr.registry.MsgRegisterNameResponse) {
    option (google.api.http) = {
      post: "/register/name"
    };
  }

  // UpdateName updates the public information of the calling node.
  rpc UpdateName(sonrio.sonr.registry.MsgUpdateName) returns (sonrio.sonr.registry.MsgUpdateNameResponse) {
    option (google.api.http) = {
      post: "/update/name"
    };
  }

  // AccessService creates a new signing key for the calling node in order to be authorized to
  // access the service. It is only allowed to be called once per node.
  rpc AccessService(highway.v1.MsgAccessService) returns (highway.v1.MsgAccessServiceResponse) {
    option (google.api.http) = {
      post: "/access/service"
    };
  }

  // RegisterService registers a new service for the calling node. The calling node must have
  // already been enabled for development.
  rpc RegisterService(sonrio.sonr.registry.MsgRegisterService) returns (sonrio.sonr.registry.MsgRegisterServiceResponse) {
    option (google.api.http) = {
      post: "/register/service"
    };
  }

  // UpdateService updates the details and public configuration of the calling node's service.
  rpc UpdateService(sonrio.sonr.registry.MsgUpdateService) returns (sonrio.sonr.registry.MsgUpdateServiceResponse) {
    option (google.api.http) = {
      post: "/update/service"
    };
  }

  // CreateChannel creates a new Publish/Subscribe topic channel for the given service.
  // The calling node must have already registered a service for the channel.
  rpc CreateChannel(sonrio.sonr.channel.MsgCreateChannel) returns (sonrio.sonr.channel.MsgCreateChannelResponse) {
    option (google.api.http) = {
      post: "/create/channel"
    };
  }

  // ReadChannel lists all peers subscribed to the given channel, and additional details about
  // the channels configuration.
  rpc ReadChannel(sonrio.sonr.channel.MsgReadChannel) returns (sonrio.sonr.channel.MsgReadChannelResponse) {
    option (google.api.http) = {
      post: "/read/channel"
    };
  }

  // UpdateChannel updates the configuration of the given channel.
  rpc UpdateChannel(sonrio.sonr.channel.MsgUpdateChannel) returns (sonrio.sonr.channel.MsgUpdateChannelResponse) {
    option (google.api.http) = {
      post: "/update/channel"
    };
  }

  // DeleteChannel deletes the given channel if the calling node is the owner of the channel.
  rpc DeleteChannel(sonrio.sonr.channel.MsgDeleteChannel) returns (sonrio.sonr.channel.MsgDeleteChannelResponse) {
    option (google.api.http) = {
      post: "/delete/channel"
    };
  }

  // ListenChannel subscribes the calling node to the given channel and returns all publish events
  // as a stream.
  rpc ListenChannel(highway.v1.MsgListenChannel) returns (stream sonrio.sonr.channel.ChannelMessage) {
    option (google.api.http) = {
      post: "/listen/channel"
    };
  }

  // CreateBucket creates a new bucket for the calling nodes service.
  rpc CreateBucket(sonrio.sonr.bucket.MsgCreateBucket) returns (sonrio.sonr.bucket.MsgCreateBucketResponse) {
    option (google.api.http) = {
      post: "/create/bucket"
    };
  }

  // ReadBucket lists all the blobs in the given bucket. The calling node must have access to the
  // bucket.
  rpc ReadBucket(sonrio.sonr.bucket.MsgReadBucket) returns (sonrio.sonr.bucket.MsgReadBucketResponse) {
    option (google.api.http) = {
      post: "/read/bucket"
    };
  }

  // UpdateBucket updates the configuration of the given bucket. The calling node must have access
  // to the bucket.
  rpc UpdateBucket(sonrio.sonr.bucket.MsgUpdateBucket) returns (sonrio.sonr.bucket.MsgUpdateBucketResponse) {
    option (google.api.http) = {
      post: "/update/bucket"
    };
  }

  // DeleteBucket deletes the given bucket if the calling node is the owner of the bucket.
  rpc DeleteBucket(sonrio.sonr.bucket.MsgDeleteBucket) returns (sonrio.sonr.bucket.MsgDeleteBucketResponse) {
    option (google.api.http) = {
      post: "/delete/bucket"
    };
  }

  // CreateObject defines a new object to be utilized by the calling node's service. The object will
  // be placed in the Highway Service Graph and can be used in channels and other modules.
  rpc CreateObject(sonrio.sonr.object.MsgCreateObject) returns (sonrio.sonr.object.MsgCreateObjectResponse) {
    option (google.api.http) = {
      post: "/create/object"
    };
  }

  // ReadObject returns the details of the given object provided its DID or Label.
  rpc ReadObject(sonrio.sonr.object.MsgReadObject) returns (sonrio.sonr.object.MsgReadObjectResponse) {
    option (google.api.http) = {
      post: "/read/object"
    };
  }

  // UpdateObject modifies the property fields of the given object.
  rpc UpdateObject(sonrio.sonr.object.MsgUpdateObject) returns (sonrio.sonr.object.MsgUpdateObjectResponse) {
    option (google.api.http) = {
      post: "/update/object"
    };
  }

  // DeleteObject deletes the given object if the calling node is the owner of the object.
  rpc DeleteObject(sonrio.sonr.object.MsgDeleteObject) returns (sonrio.sonr.object.MsgDeleteObjectResponse) {
    option (google.api.http) = {
      post: "/delete/object"
    };
  }

  // UploadBlob uploads a file or buffer to the calling node's service IPFS storage.
  rpc UploadBlob(highway.v1.MsgUploadBlob) returns (highway.v1.MsgUploadBlobResponse) {
    option (google.api.http) = {
      post: "/upload/blob"
    };
  }

  // DownloadBlob downloads a file or buffer from the calling node's service IPFS storage.
  rpc DownloadBlob(highway.v1.MsgDownloadBlob) returns (highway.v1.MsgDownloadBlobResponse) {
    option (google.api.http) = {
      post: "/download/blob"
    };
  }

  // SyncBlob synchronizes a local file from the calling node to the given service's IPFS storage.
  rpc SyncBlob(highway.v1.MsgSyncBlob) returns (highway.v1.MsgSyncBlobResponse) {
    option (google.api.http) = {
      post: "/sync/blob"
    };
  }

  // DeleteBlob deletes the given file from the calling node's service IPFS storage.
  rpc DeleteBlob(highway.v1.MsgDeleteBlob) returns (highway.v1.MsgDeleteBlobResponse) {
    option (google.api.http) = {
      post: "/delete/blob"
    };
  }

  // ParseDid parses a potential DID string into a DID object.
  rpc ParseDid(highway.v1.MsgParseDid) returns (highway.v1.MsgResolveDidResponse) {
    option (google.api.http) = {
      post: "/parse/did"
    };
  }

  // ResolveDid resolves a DID to its DID document if the DID is valid and the calling node has
  // access to the DID Document.
  rpc ResolveDid(highway.v1.MsgResolveDid) returns (highway.v1.MsgResolveDidResponse) {
    option (google.api.http) = {
      post: "/resolve/did"
    };
  }
}
